apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def buildInfo = [
        siteUrl: 'https://github.com/{{cookiecutter.github_account}}/{{cookiecutter.project_slug}}',
        gitUrl: 'https://github.com/{{cookiecutter.github_account}}/{{cookiecutter.project_slug}}.git',
        name: "{{cookiecutter.project_slug}}",
        group: "com.{{cookiecutter.java_group_name}}.{{cookiecutter.java_name}}",
        version: "0.1",
        versionCode: 1
]

group = buildInfo.group
version = buildInfo.version

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 23
        versionCode buildInfo.versionCode
        versionName buildInfo.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'junit:junit:4.12'
    compile 'javax.inject:javax.inject:1'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.android.support:support-annotations:23.1.1'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = buildInfo.name
        websiteUrl = buildInfo.siteUrl
        vcsUrl = buildInfo.gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

bintrayUpload.dependsOn([build, sourcesJar])

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}
